// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `CandyCrush.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package candycrush;

public final class ClientPrxHelper extends Ice.ObjectPrxHelperBase implements
		ClientPrx {
	private static final String __customLog_name = "customLog";

	public void customLog(String message, int code) {
		customLog(message, code, null, false);
	}

	public void customLog(String message, int code,
			java.util.Map<String, String> __ctx) {
		customLog(message, code, __ctx, true);
	}

	private void customLog(String message, int code,
			java.util.Map<String, String> __ctx, boolean __explicitCtx) {
		if (__explicitCtx && __ctx == null) {
			__ctx = _emptyContext;
		}
		final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper
				.get(this, "customLog", __ctx);
		int __cnt = 0;
		try {
			while (true) {
				Ice._ObjectDel __delBase = null;
				try {
					__delBase = __getDelegate(false);
					_ClientDel __del = (_ClientDel) __delBase;
					__del.customLog(message, code, __ctx, __observer);
					return;
				} catch (IceInternal.LocalExceptionWrapper __ex) {
					__handleExceptionWrapper(__delBase, __ex, __observer);
				} catch (Ice.LocalException __ex) {
					__cnt = __handleException(__delBase, __ex, null, __cnt,
							__observer);
				}
			}
		} finally {
			if (__observer != null) {
				__observer.detach();
			}
		}
	}

	public Ice.AsyncResult begin_customLog(String message, int code) {
		return begin_customLog(message, code, null, false, null);
	}

	public Ice.AsyncResult begin_customLog(String message, int code,
			java.util.Map<String, String> __ctx) {
		return begin_customLog(message, code, __ctx, true, null);
	}

	public Ice.AsyncResult begin_customLog(String message, int code,
			Ice.Callback __cb) {
		return begin_customLog(message, code, null, false, __cb);
	}

	public Ice.AsyncResult begin_customLog(String message, int code,
			java.util.Map<String, String> __ctx, Ice.Callback __cb) {
		return begin_customLog(message, code, __ctx, true, __cb);
	}

	public Ice.AsyncResult begin_customLog(String message, int code,
			Callback_Client_customLog __cb) {
		return begin_customLog(message, code, null, false, __cb);
	}

	public Ice.AsyncResult begin_customLog(String message, int code,
			java.util.Map<String, String> __ctx, Callback_Client_customLog __cb) {
		return begin_customLog(message, code, __ctx, true, __cb);
	}

	private Ice.AsyncResult begin_customLog(String message, int code,
			java.util.Map<String, String> __ctx, boolean __explicitCtx,
			IceInternal.CallbackBase __cb) {
		IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(
				this, __customLog_name, __cb);
		try {
			__result.__prepare(__customLog_name, Ice.OperationMode.Normal,
					__ctx, __explicitCtx);
			IceInternal.BasicStream __os = __result
					.__startWriteParams(Ice.FormatType.DefaultFormat);
			__os.writeString(message);
			__os.writeInt(code);
			__result.__endWriteParams();
			__result.__send(true);
		} catch (Ice.LocalException __ex) {
			__result.__exceptionAsync(__ex);
		}
		return __result;
	}

	public void end_customLog(Ice.AsyncResult __result) {
		__end(__result, __customLog_name);
	}

	private static final String __endGame_name = "endGame";

	public void endGame(int team) {
		endGame(team, null, false);
	}

	public void endGame(int team, java.util.Map<String, String> __ctx) {
		endGame(team, __ctx, true);
	}

	private void endGame(int team, java.util.Map<String, String> __ctx,
			boolean __explicitCtx) {
		if (__explicitCtx && __ctx == null) {
			__ctx = _emptyContext;
		}
		final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper
				.get(this, "endGame", __ctx);
		int __cnt = 0;
		try {
			while (true) {
				Ice._ObjectDel __delBase = null;
				try {
					__delBase = __getDelegate(false);
					_ClientDel __del = (_ClientDel) __delBase;
					__del.endGame(team, __ctx, __observer);
					return;
				} catch (IceInternal.LocalExceptionWrapper __ex) {
					__handleExceptionWrapper(__delBase, __ex, __observer);
				} catch (Ice.LocalException __ex) {
					__cnt = __handleException(__delBase, __ex, null, __cnt,
							__observer);
				}
			}
		} finally {
			if (__observer != null) {
				__observer.detach();
			}
		}
	}

	public Ice.AsyncResult begin_endGame(int team) {
		return begin_endGame(team, null, false, null);
	}

	public Ice.AsyncResult begin_endGame(int team,
			java.util.Map<String, String> __ctx) {
		return begin_endGame(team, __ctx, true, null);
	}

	public Ice.AsyncResult begin_endGame(int team, Ice.Callback __cb) {
		return begin_endGame(team, null, false, __cb);
	}

	public Ice.AsyncResult begin_endGame(int team,
			java.util.Map<String, String> __ctx, Ice.Callback __cb) {
		return begin_endGame(team, __ctx, true, __cb);
	}

	public Ice.AsyncResult begin_endGame(int team, Callback_Client_endGame __cb) {
		return begin_endGame(team, null, false, __cb);
	}

	public Ice.AsyncResult begin_endGame(int team,
			java.util.Map<String, String> __ctx, Callback_Client_endGame __cb) {
		return begin_endGame(team, __ctx, true, __cb);
	}

	private Ice.AsyncResult begin_endGame(int team,
			java.util.Map<String, String> __ctx, boolean __explicitCtx,
			IceInternal.CallbackBase __cb) {
		IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(
				this, __endGame_name, __cb);
		try {
			__result.__prepare(__endGame_name, Ice.OperationMode.Normal, __ctx,
					__explicitCtx);
			IceInternal.BasicStream __os = __result
					.__startWriteParams(Ice.FormatType.DefaultFormat);
			__os.writeInt(team);
			__result.__endWriteParams();
			__result.__send(true);
		} catch (Ice.LocalException __ex) {
			__result.__exceptionAsync(__ex);
		}
		return __result;
	}

	public void end_endGame(Ice.AsyncResult __result) {
		__end(__result, __endGame_name);
	}

	private static final String __fillNewSquares_name = "fillNewSquares";

	public void fillNewSquares(Square[] newSquares) {
		fillNewSquares(newSquares, null, false);
	}

	public void fillNewSquares(Square[] newSquares,
			java.util.Map<String, String> __ctx) {
		fillNewSquares(newSquares, __ctx, true);
	}

	private void fillNewSquares(Square[] newSquares,
			java.util.Map<String, String> __ctx, boolean __explicitCtx) {
		if (__explicitCtx && __ctx == null) {
			__ctx = _emptyContext;
		}
		final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper
				.get(this, "fillNewSquares", __ctx);
		int __cnt = 0;
		try {
			while (true) {
				Ice._ObjectDel __delBase = null;
				try {
					__delBase = __getDelegate(false);
					_ClientDel __del = (_ClientDel) __delBase;
					__del.fillNewSquares(newSquares, __ctx, __observer);
					return;
				} catch (IceInternal.LocalExceptionWrapper __ex) {
					__cnt = __handleExceptionWrapperRelaxed(__delBase, __ex,
							null, __cnt, __observer);
				} catch (Ice.LocalException __ex) {
					__cnt = __handleException(__delBase, __ex, null, __cnt,
							__observer);
				}
			}
		} finally {
			if (__observer != null) {
				__observer.detach();
			}
		}
	}

	public Ice.AsyncResult begin_fillNewSquares(Square[] newSquares) {
		return begin_fillNewSquares(newSquares, null, false, null);
	}

	public Ice.AsyncResult begin_fillNewSquares(Square[] newSquares,
			java.util.Map<String, String> __ctx) {
		return begin_fillNewSquares(newSquares, __ctx, true, null);
	}

	public Ice.AsyncResult begin_fillNewSquares(Square[] newSquares,
			Ice.Callback __cb) {
		return begin_fillNewSquares(newSquares, null, false, __cb);
	}

	public Ice.AsyncResult begin_fillNewSquares(Square[] newSquares,
			java.util.Map<String, String> __ctx, Ice.Callback __cb) {
		return begin_fillNewSquares(newSquares, __ctx, true, __cb);
	}

	public Ice.AsyncResult begin_fillNewSquares(Square[] newSquares,
			Callback_Client_fillNewSquares __cb) {
		return begin_fillNewSquares(newSquares, null, false, __cb);
	}

	public Ice.AsyncResult begin_fillNewSquares(Square[] newSquares,
			java.util.Map<String, String> __ctx,
			Callback_Client_fillNewSquares __cb) {
		return begin_fillNewSquares(newSquares, __ctx, true, __cb);
	}

	private Ice.AsyncResult begin_fillNewSquares(Square[] newSquares,
			java.util.Map<String, String> __ctx, boolean __explicitCtx,
			IceInternal.CallbackBase __cb) {
		IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(
				this, __fillNewSquares_name, __cb);
		try {
			__result.__prepare(__fillNewSquares_name,
					Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
			IceInternal.BasicStream __os = __result
					.__startWriteParams(Ice.FormatType.DefaultFormat);
			SquareListHelper.write(__os, newSquares);
			__result.__endWriteParams();
			__result.__send(true);
		} catch (Ice.LocalException __ex) {
			__result.__exceptionAsync(__ex);
		}
		return __result;
	}

	public void end_fillNewSquares(Ice.AsyncResult __result) {
		__end(__result, __fillNewSquares_name);
	}

	private static final String __log_name = "log";

	public void log(String message) {
		log(message, null, false);
	}

	public void log(String message, java.util.Map<String, String> __ctx) {
		log(message, __ctx, true);
	}

	private void log(String message, java.util.Map<String, String> __ctx,
			boolean __explicitCtx) {
		if (__explicitCtx && __ctx == null) {
			__ctx = _emptyContext;
		}
		final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper
				.get(this, "log", __ctx);
		int __cnt = 0;
		try {
			while (true) {
				Ice._ObjectDel __delBase = null;
				try {
					__delBase = __getDelegate(false);
					_ClientDel __del = (_ClientDel) __delBase;
					__del.log(message, __ctx, __observer);
					return;
				} catch (IceInternal.LocalExceptionWrapper __ex) {
					__handleExceptionWrapper(__delBase, __ex, __observer);
				} catch (Ice.LocalException __ex) {
					__cnt = __handleException(__delBase, __ex, null, __cnt,
							__observer);
				}
			}
		} finally {
			if (__observer != null) {
				__observer.detach();
			}
		}
	}

	public Ice.AsyncResult begin_log(String message) {
		return begin_log(message, null, false, null);
	}

	public Ice.AsyncResult begin_log(String message,
			java.util.Map<String, String> __ctx) {
		return begin_log(message, __ctx, true, null);
	}

	public Ice.AsyncResult begin_log(String message, Ice.Callback __cb) {
		return begin_log(message, null, false, __cb);
	}

	public Ice.AsyncResult begin_log(String message,
			java.util.Map<String, String> __ctx, Ice.Callback __cb) {
		return begin_log(message, __ctx, true, __cb);
	}

	public Ice.AsyncResult begin_log(String message, Callback_Client_log __cb) {
		return begin_log(message, null, false, __cb);
	}

	public Ice.AsyncResult begin_log(String message,
			java.util.Map<String, String> __ctx, Callback_Client_log __cb) {
		return begin_log(message, __ctx, true, __cb);
	}

	private Ice.AsyncResult begin_log(String message,
			java.util.Map<String, String> __ctx, boolean __explicitCtx,
			IceInternal.CallbackBase __cb) {
		IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(
				this, __log_name, __cb);
		try {
			__result.__prepare(__log_name, Ice.OperationMode.Normal, __ctx,
					__explicitCtx);
			IceInternal.BasicStream __os = __result
					.__startWriteParams(Ice.FormatType.DefaultFormat);
			__os.writeString(message);
			__result.__endWriteParams();
			__result.__send(true);
		} catch (Ice.LocalException __ex) {
			__result.__exceptionAsync(__ex);
		}
		return __result;
	}

	public void end_log(Ice.AsyncResult __result) {
		__end(__result, __log_name);
	}

	private static final String __logStatus_name = "logStatus";

	public void logStatus(String statusMessage) {
		logStatus(statusMessage, null, false);
	}

	public void logStatus(String statusMessage,
			java.util.Map<String, String> __ctx) {
		logStatus(statusMessage, __ctx, true);
	}

	private void logStatus(String statusMessage,
			java.util.Map<String, String> __ctx, boolean __explicitCtx) {
		if (__explicitCtx && __ctx == null) {
			__ctx = _emptyContext;
		}
		final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper
				.get(this, "logStatus", __ctx);
		int __cnt = 0;
		try {
			while (true) {
				Ice._ObjectDel __delBase = null;
				try {
					__delBase = __getDelegate(false);
					_ClientDel __del = (_ClientDel) __delBase;
					__del.logStatus(statusMessage, __ctx, __observer);
					return;
				} catch (IceInternal.LocalExceptionWrapper __ex) {
					__handleExceptionWrapper(__delBase, __ex, __observer);
				} catch (Ice.LocalException __ex) {
					__cnt = __handleException(__delBase, __ex, null, __cnt,
							__observer);
				}
			}
		} finally {
			if (__observer != null) {
				__observer.detach();
			}
		}
	}

	public Ice.AsyncResult begin_logStatus(String statusMessage) {
		return begin_logStatus(statusMessage, null, false, null);
	}

	public Ice.AsyncResult begin_logStatus(String statusMessage,
			java.util.Map<String, String> __ctx) {
		return begin_logStatus(statusMessage, __ctx, true, null);
	}

	public Ice.AsyncResult begin_logStatus(String statusMessage,
			Ice.Callback __cb) {
		return begin_logStatus(statusMessage, null, false, __cb);
	}

	public Ice.AsyncResult begin_logStatus(String statusMessage,
			java.util.Map<String, String> __ctx, Ice.Callback __cb) {
		return begin_logStatus(statusMessage, __ctx, true, __cb);
	}

	public Ice.AsyncResult begin_logStatus(String statusMessage,
			Callback_Client_logStatus __cb) {
		return begin_logStatus(statusMessage, null, false, __cb);
	}

	public Ice.AsyncResult begin_logStatus(String statusMessage,
			java.util.Map<String, String> __ctx, Callback_Client_logStatus __cb) {
		return begin_logStatus(statusMessage, __ctx, true, __cb);
	}

	private Ice.AsyncResult begin_logStatus(String statusMessage,
			java.util.Map<String, String> __ctx, boolean __explicitCtx,
			IceInternal.CallbackBase __cb) {
		IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(
				this, __logStatus_name, __cb);
		try {
			__result.__prepare(__logStatus_name, Ice.OperationMode.Normal,
					__ctx, __explicitCtx);
			IceInternal.BasicStream __os = __result
					.__startWriteParams(Ice.FormatType.DefaultFormat);
			__os.writeString(statusMessage);
			__result.__endWriteParams();
			__result.__send(true);
		} catch (Ice.LocalException __ex) {
			__result.__exceptionAsync(__ex);
		}
		return __result;
	}

	public void end_logStatus(Ice.AsyncResult __result) {
		__end(__result, __logStatus_name);
	}

	private static final String __makeMovement_name = "makeMovement";

	public void makeMovement(Movement mov) {
		makeMovement(mov, null, false);
	}

	public void makeMovement(Movement mov, java.util.Map<String, String> __ctx) {
		makeMovement(mov, __ctx, true);
	}

	private void makeMovement(Movement mov,
			java.util.Map<String, String> __ctx, boolean __explicitCtx) {
		if (__explicitCtx && __ctx == null) {
			__ctx = _emptyContext;
		}
		final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper
				.get(this, "makeMovement", __ctx);
		int __cnt = 0;
		try {
			while (true) {
				Ice._ObjectDel __delBase = null;
				try {
					__delBase = __getDelegate(false);
					_ClientDel __del = (_ClientDel) __delBase;
					__del.makeMovement(mov, __ctx, __observer);
					return;
				} catch (IceInternal.LocalExceptionWrapper __ex) {
					__handleExceptionWrapper(__delBase, __ex, __observer);
				} catch (Ice.LocalException __ex) {
					__cnt = __handleException(__delBase, __ex, null, __cnt,
							__observer);
				}
			}
		} finally {
			if (__observer != null) {
				__observer.detach();
			}
		}
	}

	public Ice.AsyncResult begin_makeMovement(Movement mov) {
		return begin_makeMovement(mov, null, false, null);
	}

	public Ice.AsyncResult begin_makeMovement(Movement mov,
			java.util.Map<String, String> __ctx) {
		return begin_makeMovement(mov, __ctx, true, null);
	}

	public Ice.AsyncResult begin_makeMovement(Movement mov, Ice.Callback __cb) {
		return begin_makeMovement(mov, null, false, __cb);
	}

	public Ice.AsyncResult begin_makeMovement(Movement mov,
			java.util.Map<String, String> __ctx, Ice.Callback __cb) {
		return begin_makeMovement(mov, __ctx, true, __cb);
	}

	public Ice.AsyncResult begin_makeMovement(Movement mov,
			Callback_Client_makeMovement __cb) {
		return begin_makeMovement(mov, null, false, __cb);
	}

	public Ice.AsyncResult begin_makeMovement(Movement mov,
			java.util.Map<String, String> __ctx,
			Callback_Client_makeMovement __cb) {
		return begin_makeMovement(mov, __ctx, true, __cb);
	}

	private Ice.AsyncResult begin_makeMovement(Movement mov,
			java.util.Map<String, String> __ctx, boolean __explicitCtx,
			IceInternal.CallbackBase __cb) {
		IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(
				this, __makeMovement_name, __cb);
		try {
			__result.__prepare(__makeMovement_name, Ice.OperationMode.Normal,
					__ctx, __explicitCtx);
			IceInternal.BasicStream __os = __result
					.__startWriteParams(Ice.FormatType.DefaultFormat);
			mov.__write(__os);
			__result.__endWriteParams();
			__result.__send(true);
		} catch (Ice.LocalException __ex) {
			__result.__exceptionAsync(__ex);
		}
		return __result;
	}

	public void end_makeMovement(Ice.AsyncResult __result) {
		__end(__result, __makeMovement_name);
	}

	private static final String __newParticipant_name = "newParticipant";

	public void newParticipant(String nick, int team) {
		newParticipant(nick, team, null, false);
	}

	public void newParticipant(String nick, int team,
			java.util.Map<String, String> __ctx) {
		newParticipant(nick, team, __ctx, true);
	}

	private void newParticipant(String nick, int team,
			java.util.Map<String, String> __ctx, boolean __explicitCtx) {
		if (__explicitCtx && __ctx == null) {
			__ctx = _emptyContext;
		}
		final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper
				.get(this, "newParticipant", __ctx);
		int __cnt = 0;
		try {
			while (true) {
				Ice._ObjectDel __delBase = null;
				try {
					__delBase = __getDelegate(false);
					_ClientDel __del = (_ClientDel) __delBase;
					__del.newParticipant(nick, team, __ctx, __observer);
					return;
				} catch (IceInternal.LocalExceptionWrapper __ex) {
					__handleExceptionWrapper(__delBase, __ex, __observer);
				} catch (Ice.LocalException __ex) {
					__cnt = __handleException(__delBase, __ex, null, __cnt,
							__observer);
				}
			}
		} finally {
			if (__observer != null) {
				__observer.detach();
			}
		}
	}

	public Ice.AsyncResult begin_newParticipant(String nick, int team) {
		return begin_newParticipant(nick, team, null, false, null);
	}

	public Ice.AsyncResult begin_newParticipant(String nick, int team,
			java.util.Map<String, String> __ctx) {
		return begin_newParticipant(nick, team, __ctx, true, null);
	}

	public Ice.AsyncResult begin_newParticipant(String nick, int team,
			Ice.Callback __cb) {
		return begin_newParticipant(nick, team, null, false, __cb);
	}

	public Ice.AsyncResult begin_newParticipant(String nick, int team,
			java.util.Map<String, String> __ctx, Ice.Callback __cb) {
		return begin_newParticipant(nick, team, __ctx, true, __cb);
	}

	public Ice.AsyncResult begin_newParticipant(String nick, int team,
			Callback_Client_newParticipant __cb) {
		return begin_newParticipant(nick, team, null, false, __cb);
	}

	public Ice.AsyncResult begin_newParticipant(String nick, int team,
			java.util.Map<String, String> __ctx,
			Callback_Client_newParticipant __cb) {
		return begin_newParticipant(nick, team, __ctx, true, __cb);
	}

	private Ice.AsyncResult begin_newParticipant(String nick, int team,
			java.util.Map<String, String> __ctx, boolean __explicitCtx,
			IceInternal.CallbackBase __cb) {
		IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(
				this, __newParticipant_name, __cb);
		try {
			__result.__prepare(__newParticipant_name, Ice.OperationMode.Normal,
					__ctx, __explicitCtx);
			IceInternal.BasicStream __os = __result
					.__startWriteParams(Ice.FormatType.DefaultFormat);
			__os.writeString(nick);
			__os.writeInt(team);
			__result.__endWriteParams();
			__result.__send(true);
		} catch (Ice.LocalException __ex) {
			__result.__exceptionAsync(__ex);
		}
		return __result;
	}

	public void end_newParticipant(Ice.AsyncResult __result) {
		__end(__result, __newParticipant_name);
	}

	private static final String __participantLeft_name = "participantLeft";

	public void participantLeft(String nick, int team) {
		participantLeft(nick, team, null, false);
	}

	public void participantLeft(String nick, int team,
			java.util.Map<String, String> __ctx) {
		participantLeft(nick, team, __ctx, true);
	}

	private void participantLeft(String nick, int team,
			java.util.Map<String, String> __ctx, boolean __explicitCtx) {
		if (__explicitCtx && __ctx == null) {
			__ctx = _emptyContext;
		}
		final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper
				.get(this, "participantLeft", __ctx);
		int __cnt = 0;
		try {
			while (true) {
				Ice._ObjectDel __delBase = null;
				try {
					__delBase = __getDelegate(false);
					_ClientDel __del = (_ClientDel) __delBase;
					__del.participantLeft(nick, team, __ctx, __observer);
					return;
				} catch (IceInternal.LocalExceptionWrapper __ex) {
					__handleExceptionWrapper(__delBase, __ex, __observer);
				} catch (Ice.LocalException __ex) {
					__cnt = __handleException(__delBase, __ex, null, __cnt,
							__observer);
				}
			}
		} finally {
			if (__observer != null) {
				__observer.detach();
			}
		}
	}

	public Ice.AsyncResult begin_participantLeft(String nick, int team) {
		return begin_participantLeft(nick, team, null, false, null);
	}

	public Ice.AsyncResult begin_participantLeft(String nick, int team,
			java.util.Map<String, String> __ctx) {
		return begin_participantLeft(nick, team, __ctx, true, null);
	}

	public Ice.AsyncResult begin_participantLeft(String nick, int team,
			Ice.Callback __cb) {
		return begin_participantLeft(nick, team, null, false, __cb);
	}

	public Ice.AsyncResult begin_participantLeft(String nick, int team,
			java.util.Map<String, String> __ctx, Ice.Callback __cb) {
		return begin_participantLeft(nick, team, __ctx, true, __cb);
	}

	public Ice.AsyncResult begin_participantLeft(String nick, int team,
			Callback_Client_participantLeft __cb) {
		return begin_participantLeft(nick, team, null, false, __cb);
	}

	public Ice.AsyncResult begin_participantLeft(String nick, int team,
			java.util.Map<String, String> __ctx,
			Callback_Client_participantLeft __cb) {
		return begin_participantLeft(nick, team, __ctx, true, __cb);
	}

	private Ice.AsyncResult begin_participantLeft(String nick, int team,
			java.util.Map<String, String> __ctx, boolean __explicitCtx,
			IceInternal.CallbackBase __cb) {
		IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(
				this, __participantLeft_name, __cb);
		try {
			__result.__prepare(__participantLeft_name,
					Ice.OperationMode.Normal, __ctx, __explicitCtx);
			IceInternal.BasicStream __os = __result
					.__startWriteParams(Ice.FormatType.DefaultFormat);
			__os.writeString(nick);
			__os.writeInt(team);
			__result.__endWriteParams();
			__result.__send(true);
		} catch (Ice.LocalException __ex) {
			__result.__exceptionAsync(__ex);
		}
		return __result;
	}

	public void end_participantLeft(Ice.AsyncResult __result) {
		__end(__result, __participantLeft_name);
	}

	private static final String __receiveMessage_name = "receiveMessage";

	public void receiveMessage(String from, String message) {
		receiveMessage(from, message, null, false);
	}

	public void receiveMessage(String from, String message,
			java.util.Map<String, String> __ctx) {
		receiveMessage(from, message, __ctx, true);
	}

	private void receiveMessage(String from, String message,
			java.util.Map<String, String> __ctx, boolean __explicitCtx) {
		if (__explicitCtx && __ctx == null) {
			__ctx = _emptyContext;
		}
		final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper
				.get(this, "receiveMessage", __ctx);
		int __cnt = 0;
		try {
			while (true) {
				Ice._ObjectDel __delBase = null;
				try {
					__delBase = __getDelegate(false);
					_ClientDel __del = (_ClientDel) __delBase;
					__del.receiveMessage(from, message, __ctx, __observer);
					return;
				} catch (IceInternal.LocalExceptionWrapper __ex) {
					__handleExceptionWrapper(__delBase, __ex, __observer);
				} catch (Ice.LocalException __ex) {
					__cnt = __handleException(__delBase, __ex, null, __cnt,
							__observer);
				}
			}
		} finally {
			if (__observer != null) {
				__observer.detach();
			}
		}
	}

	public Ice.AsyncResult begin_receiveMessage(String from, String message) {
		return begin_receiveMessage(from, message, null, false, null);
	}

	public Ice.AsyncResult begin_receiveMessage(String from, String message,
			java.util.Map<String, String> __ctx) {
		return begin_receiveMessage(from, message, __ctx, true, null);
	}

	public Ice.AsyncResult begin_receiveMessage(String from, String message,
			Ice.Callback __cb) {
		return begin_receiveMessage(from, message, null, false, __cb);
	}

	public Ice.AsyncResult begin_receiveMessage(String from, String message,
			java.util.Map<String, String> __ctx, Ice.Callback __cb) {
		return begin_receiveMessage(from, message, __ctx, true, __cb);
	}

	public Ice.AsyncResult begin_receiveMessage(String from, String message,
			Callback_Client_receiveMessage __cb) {
		return begin_receiveMessage(from, message, null, false, __cb);
	}

	public Ice.AsyncResult begin_receiveMessage(String from, String message,
			java.util.Map<String, String> __ctx,
			Callback_Client_receiveMessage __cb) {
		return begin_receiveMessage(from, message, __ctx, true, __cb);
	}

	private Ice.AsyncResult begin_receiveMessage(String from, String message,
			java.util.Map<String, String> __ctx, boolean __explicitCtx,
			IceInternal.CallbackBase __cb) {
		IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(
				this, __receiveMessage_name, __cb);
		try {
			__result.__prepare(__receiveMessage_name, Ice.OperationMode.Normal,
					__ctx, __explicitCtx);
			IceInternal.BasicStream __os = __result
					.__startWriteParams(Ice.FormatType.DefaultFormat);
			__os.writeString(from);
			__os.writeString(message);
			__result.__endWriteParams();
			__result.__send(true);
		} catch (Ice.LocalException __ex) {
			__result.__exceptionAsync(__ex);
		}
		return __result;
	}

	public void end_receiveMessage(Ice.AsyncResult __result) {
		__end(__result, __receiveMessage_name);
	}

	private static final String __score_name = "score";

	public void score(int team, int scored) {
		score(team, scored, null, false);
	}

	public void score(int team, int scored, java.util.Map<String, String> __ctx) {
		score(team, scored, __ctx, true);
	}

	private void score(int team, int scored,
			java.util.Map<String, String> __ctx, boolean __explicitCtx) {
		if (__explicitCtx && __ctx == null) {
			__ctx = _emptyContext;
		}
		final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper
				.get(this, "score", __ctx);
		int __cnt = 0;
		try {
			while (true) {
				Ice._ObjectDel __delBase = null;
				try {
					__delBase = __getDelegate(false);
					_ClientDel __del = (_ClientDel) __delBase;
					__del.score(team, scored, __ctx, __observer);
					return;
				} catch (IceInternal.LocalExceptionWrapper __ex) {
					__handleExceptionWrapper(__delBase, __ex, __observer);
				} catch (Ice.LocalException __ex) {
					__cnt = __handleException(__delBase, __ex, null, __cnt,
							__observer);
				}
			}
		} finally {
			if (__observer != null) {
				__observer.detach();
			}
		}
	}

	public Ice.AsyncResult begin_score(int team, int scored) {
		return begin_score(team, scored, null, false, null);
	}

	public Ice.AsyncResult begin_score(int team, int scored,
			java.util.Map<String, String> __ctx) {
		return begin_score(team, scored, __ctx, true, null);
	}

	public Ice.AsyncResult begin_score(int team, int scored, Ice.Callback __cb) {
		return begin_score(team, scored, null, false, __cb);
	}

	public Ice.AsyncResult begin_score(int team, int scored,
			java.util.Map<String, String> __ctx, Ice.Callback __cb) {
		return begin_score(team, scored, __ctx, true, __cb);
	}

	public Ice.AsyncResult begin_score(int team, int scored,
			Callback_Client_score __cb) {
		return begin_score(team, scored, null, false, __cb);
	}

	public Ice.AsyncResult begin_score(int team, int scored,
			java.util.Map<String, String> __ctx, Callback_Client_score __cb) {
		return begin_score(team, scored, __ctx, true, __cb);
	}

	private Ice.AsyncResult begin_score(int team, int scored,
			java.util.Map<String, String> __ctx, boolean __explicitCtx,
			IceInternal.CallbackBase __cb) {
		IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(
				this, __score_name, __cb);
		try {
			__result.__prepare(__score_name, Ice.OperationMode.Normal, __ctx,
					__explicitCtx);
			IceInternal.BasicStream __os = __result
					.__startWriteParams(Ice.FormatType.DefaultFormat);
			__os.writeInt(team);
			__os.writeInt(scored);
			__result.__endWriteParams();
			__result.__send(true);
		} catch (Ice.LocalException __ex) {
			__result.__exceptionAsync(__ex);
		}
		return __result;
	}

	public void end_score(Ice.AsyncResult __result) {
		__end(__result, __score_name);
	}

	private static final String __setBoard_name = "setBoard";

	public void setBoard(int[][] boardValues) {
		setBoard(boardValues, null, false);
	}

	public void setBoard(int[][] boardValues,
			java.util.Map<String, String> __ctx) {
		setBoard(boardValues, __ctx, true);
	}

	private void setBoard(int[][] boardValues,
			java.util.Map<String, String> __ctx, boolean __explicitCtx) {
		if (__explicitCtx && __ctx == null) {
			__ctx = _emptyContext;
		}
		final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper
				.get(this, "setBoard", __ctx);
		int __cnt = 0;
		try {
			while (true) {
				Ice._ObjectDel __delBase = null;
				try {
					__delBase = __getDelegate(false);
					_ClientDel __del = (_ClientDel) __delBase;
					__del.setBoard(boardValues, __ctx, __observer);
					return;
				} catch (IceInternal.LocalExceptionWrapper __ex) {
					__cnt = __handleExceptionWrapperRelaxed(__delBase, __ex,
							null, __cnt, __observer);
				} catch (Ice.LocalException __ex) {
					__cnt = __handleException(__delBase, __ex, null, __cnt,
							__observer);
				}
			}
		} finally {
			if (__observer != null) {
				__observer.detach();
			}
		}
	}

	public Ice.AsyncResult begin_setBoard(int[][] boardValues) {
		return begin_setBoard(boardValues, null, false, null);
	}

	public Ice.AsyncResult begin_setBoard(int[][] boardValues,
			java.util.Map<String, String> __ctx) {
		return begin_setBoard(boardValues, __ctx, true, null);
	}

	public Ice.AsyncResult begin_setBoard(int[][] boardValues, Ice.Callback __cb) {
		return begin_setBoard(boardValues, null, false, __cb);
	}

	public Ice.AsyncResult begin_setBoard(int[][] boardValues,
			java.util.Map<String, String> __ctx, Ice.Callback __cb) {
		return begin_setBoard(boardValues, __ctx, true, __cb);
	}

	public Ice.AsyncResult begin_setBoard(int[][] boardValues,
			Callback_Client_setBoard __cb) {
		return begin_setBoard(boardValues, null, false, __cb);
	}

	public Ice.AsyncResult begin_setBoard(int[][] boardValues,
			java.util.Map<String, String> __ctx, Callback_Client_setBoard __cb) {
		return begin_setBoard(boardValues, __ctx, true, __cb);
	}

	private Ice.AsyncResult begin_setBoard(int[][] boardValues,
			java.util.Map<String, String> __ctx, boolean __explicitCtx,
			IceInternal.CallbackBase __cb) {
		IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(
				this, __setBoard_name, __cb);
		try {
			__result.__prepare(__setBoard_name, Ice.OperationMode.Idempotent,
					__ctx, __explicitCtx);
			IceInternal.BasicStream __os = __result
					.__startWriteParams(Ice.FormatType.DefaultFormat);
			BoardMatrixHelper.write(__os, boardValues);
			__result.__endWriteParams();
			__result.__send(true);
		} catch (Ice.LocalException __ex) {
			__result.__exceptionAsync(__ex);
		}
		return __result;
	}

	public void end_setBoard(Ice.AsyncResult __result) {
		__end(__result, __setBoard_name);
	}

	private static final String __startGame_name = "startGame";

	public void startGame() {
		startGame(null, false);
	}

	public void startGame(java.util.Map<String, String> __ctx) {
		startGame(__ctx, true);
	}

	private void startGame(java.util.Map<String, String> __ctx,
			boolean __explicitCtx) {
		if (__explicitCtx && __ctx == null) {
			__ctx = _emptyContext;
		}
		final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper
				.get(this, "startGame", __ctx);
		int __cnt = 0;
		try {
			while (true) {
				Ice._ObjectDel __delBase = null;
				try {
					__delBase = __getDelegate(false);
					_ClientDel __del = (_ClientDel) __delBase;
					__del.startGame(__ctx, __observer);
					return;
				} catch (IceInternal.LocalExceptionWrapper __ex) {
					__handleExceptionWrapper(__delBase, __ex, __observer);
				} catch (Ice.LocalException __ex) {
					__cnt = __handleException(__delBase, __ex, null, __cnt,
							__observer);
				}
			}
		} finally {
			if (__observer != null) {
				__observer.detach();
			}
		}
	}

	public Ice.AsyncResult begin_startGame() {
		return begin_startGame(null, false, null);
	}

	public Ice.AsyncResult begin_startGame(java.util.Map<String, String> __ctx) {
		return begin_startGame(__ctx, true, null);
	}

	public Ice.AsyncResult begin_startGame(Ice.Callback __cb) {
		return begin_startGame(null, false, __cb);
	}

	public Ice.AsyncResult begin_startGame(java.util.Map<String, String> __ctx,
			Ice.Callback __cb) {
		return begin_startGame(__ctx, true, __cb);
	}

	public Ice.AsyncResult begin_startGame(Callback_Client_startGame __cb) {
		return begin_startGame(null, false, __cb);
	}

	public Ice.AsyncResult begin_startGame(java.util.Map<String, String> __ctx,
			Callback_Client_startGame __cb) {
		return begin_startGame(__ctx, true, __cb);
	}

	private Ice.AsyncResult begin_startGame(
			java.util.Map<String, String> __ctx, boolean __explicitCtx,
			IceInternal.CallbackBase __cb) {
		IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(
				this, __startGame_name, __cb);
		try {
			__result.__prepare(__startGame_name, Ice.OperationMode.Normal,
					__ctx, __explicitCtx);
			__result.__writeEmptyParams();
			__result.__send(true);
		} catch (Ice.LocalException __ex) {
			__result.__exceptionAsync(__ex);
		}
		return __result;
	}

	public void end_startGame(Ice.AsyncResult __result) {
		__end(__result, __startGame_name);
	}

	private static final String __turn_name = "turn";

	public void turn(int team) {
		turn(team, null, false);
	}

	public void turn(int team, java.util.Map<String, String> __ctx) {
		turn(team, __ctx, true);
	}

	private void turn(int team, java.util.Map<String, String> __ctx,
			boolean __explicitCtx) {
		if (__explicitCtx && __ctx == null) {
			__ctx = _emptyContext;
		}
		final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper
				.get(this, "turn", __ctx);
		int __cnt = 0;
		try {
			while (true) {
				Ice._ObjectDel __delBase = null;
				try {
					__delBase = __getDelegate(false);
					_ClientDel __del = (_ClientDel) __delBase;
					__del.turn(team, __ctx, __observer);
					return;
				} catch (IceInternal.LocalExceptionWrapper __ex) {
					__cnt = __handleExceptionWrapperRelaxed(__delBase, __ex,
							null, __cnt, __observer);
				} catch (Ice.LocalException __ex) {
					__cnt = __handleException(__delBase, __ex, null, __cnt,
							__observer);
				}
			}
		} finally {
			if (__observer != null) {
				__observer.detach();
			}
		}
	}

	public Ice.AsyncResult begin_turn(int team) {
		return begin_turn(team, null, false, null);
	}

	public Ice.AsyncResult begin_turn(int team,
			java.util.Map<String, String> __ctx) {
		return begin_turn(team, __ctx, true, null);
	}

	public Ice.AsyncResult begin_turn(int team, Ice.Callback __cb) {
		return begin_turn(team, null, false, __cb);
	}

	public Ice.AsyncResult begin_turn(int team,
			java.util.Map<String, String> __ctx, Ice.Callback __cb) {
		return begin_turn(team, __ctx, true, __cb);
	}

	public Ice.AsyncResult begin_turn(int team, Callback_Client_turn __cb) {
		return begin_turn(team, null, false, __cb);
	}

	public Ice.AsyncResult begin_turn(int team,
			java.util.Map<String, String> __ctx, Callback_Client_turn __cb) {
		return begin_turn(team, __ctx, true, __cb);
	}

	private Ice.AsyncResult begin_turn(int team,
			java.util.Map<String, String> __ctx, boolean __explicitCtx,
			IceInternal.CallbackBase __cb) {
		IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(
				this, __turn_name, __cb);
		try {
			__result.__prepare(__turn_name, Ice.OperationMode.Idempotent,
					__ctx, __explicitCtx);
			IceInternal.BasicStream __os = __result
					.__startWriteParams(Ice.FormatType.DefaultFormat);
			__os.writeInt(team);
			__result.__endWriteParams();
			__result.__send(true);
		} catch (Ice.LocalException __ex) {
			__result.__exceptionAsync(__ex);
		}
		return __result;
	}

	public void end_turn(Ice.AsyncResult __result) {
		__end(__result, __turn_name);
	}

	public static ClientPrx checkedCast(Ice.ObjectPrx __obj) {
		ClientPrx __d = null;
		if (__obj != null) {
			if (__obj instanceof ClientPrx) {
				__d = (ClientPrx) __obj;
			} else {
				if (__obj.ice_isA(ice_staticId())) {
					ClientPrxHelper __h = new ClientPrxHelper();
					__h.__copyFrom(__obj);
					__d = __h;
				}
			}
		}
		return __d;
	}

	public static ClientPrx checkedCast(Ice.ObjectPrx __obj,
			java.util.Map<String, String> __ctx) {
		ClientPrx __d = null;
		if (__obj != null) {
			if (__obj instanceof ClientPrx) {
				__d = (ClientPrx) __obj;
			} else {
				if (__obj.ice_isA(ice_staticId(), __ctx)) {
					ClientPrxHelper __h = new ClientPrxHelper();
					__h.__copyFrom(__obj);
					__d = __h;
				}
			}
		}
		return __d;
	}

	public static ClientPrx checkedCast(Ice.ObjectPrx __obj, String __facet) {
		ClientPrx __d = null;
		if (__obj != null) {
			Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
			try {
				if (__bb.ice_isA(ice_staticId())) {
					ClientPrxHelper __h = new ClientPrxHelper();
					__h.__copyFrom(__bb);
					__d = __h;
				}
			} catch (Ice.FacetNotExistException ex) {
			}
		}
		return __d;
	}

	public static ClientPrx checkedCast(Ice.ObjectPrx __obj, String __facet,
			java.util.Map<String, String> __ctx) {
		ClientPrx __d = null;
		if (__obj != null) {
			Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
			try {
				if (__bb.ice_isA(ice_staticId(), __ctx)) {
					ClientPrxHelper __h = new ClientPrxHelper();
					__h.__copyFrom(__bb);
					__d = __h;
				}
			} catch (Ice.FacetNotExistException ex) {
			}
		}
		return __d;
	}

	public static ClientPrx uncheckedCast(Ice.ObjectPrx __obj) {
		ClientPrx __d = null;
		if (__obj != null) {
			if (__obj instanceof ClientPrx) {
				__d = (ClientPrx) __obj;
			} else {
				ClientPrxHelper __h = new ClientPrxHelper();
				__h.__copyFrom(__obj);
				__d = __h;
			}
		}
		return __d;
	}

	public static ClientPrx uncheckedCast(Ice.ObjectPrx __obj, String __facet) {
		ClientPrx __d = null;
		if (__obj != null) {
			Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
			ClientPrxHelper __h = new ClientPrxHelper();
			__h.__copyFrom(__bb);
			__d = __h;
		}
		return __d;
	}

	public static final String[] __ids = { "::Ice::Object",
			"::candycrush::Client" };

	public static String ice_staticId() {
		return __ids[1];
	}

	protected Ice._ObjectDelM __createDelegateM() {
		return new _ClientDelM();
	}

	protected Ice._ObjectDelD __createDelegateD() {
		return new _ClientDelD();
	}

	public static void __write(IceInternal.BasicStream __os, ClientPrx v) {
		__os.writeProxy(v);
	}

	public static ClientPrx __read(IceInternal.BasicStream __is) {
		Ice.ObjectPrx proxy = __is.readProxy();
		if (proxy != null) {
			ClientPrxHelper result = new ClientPrxHelper();
			result.__copyFrom(proxy);
			return result;
		}
		return null;
	}

	public static final long serialVersionUID = 0L;
}
