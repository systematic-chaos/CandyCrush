// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `CandyCrush.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package candycrush;

public class Movement implements java.lang.Cloneable, java.io.Serializable {
	public int fromRow;

	public int fromColumn;

	public int toRow;

	public int toColumn;

	public int nSupporters;

	public Movement() {
	}

	public Movement(int fromRow, int fromColumn, int toRow, int toColumn,
			int nSupporters) {
		this.fromRow = fromRow;
		this.fromColumn = fromColumn;
		this.toRow = toRow;
		this.toColumn = toColumn;
		this.nSupporters = nSupporters;
	}

	public boolean equals(java.lang.Object rhs) {
		if (this == rhs) {
			return true;
		}
		Movement _r = null;
		if (rhs instanceof Movement) {
			_r = (Movement) rhs;
		}

		if (_r != null) {
			if (fromRow != _r.fromRow) {
				return false;
			}
			if (fromColumn != _r.fromColumn) {
				return false;
			}
			if (toRow != _r.toRow) {
				return false;
			}
			if (toColumn != _r.toColumn) {
				return false;
			}
			if (nSupporters != _r.nSupporters) {
				return false;
			}

			return true;
		}

		return false;
	}

	public int hashCode() {
		int __h = 5381;
		__h = IceInternal.HashUtil.hashAdd(__h, "::candycrush::Movement");
		__h = IceInternal.HashUtil.hashAdd(__h, fromRow);
		__h = IceInternal.HashUtil.hashAdd(__h, fromColumn);
		__h = IceInternal.HashUtil.hashAdd(__h, toRow);
		__h = IceInternal.HashUtil.hashAdd(__h, toColumn);
		__h = IceInternal.HashUtil.hashAdd(__h, nSupporters);
		return __h;
	}

	public java.lang.Object clone() {
		java.lang.Object o = null;
		try {
			o = super.clone();
		} catch (CloneNotSupportedException ex) {
			assert false; // impossible
		}
		return o;
	}

	public void __write(IceInternal.BasicStream __os) {
		__os.writeInt(fromRow);
		__os.writeInt(fromColumn);
		__os.writeInt(toRow);
		__os.writeInt(toColumn);
		__os.writeInt(nSupporters);
	}

	public void __read(IceInternal.BasicStream __is) {
		fromRow = __is.readInt();
		fromColumn = __is.readInt();
		toRow = __is.readInt();
		toColumn = __is.readInt();
		nSupporters = __is.readInt();
	}

	public static final long serialVersionUID = -1675642076L;
}
