// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `CandyCrush.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package candycrush;

public final class _ServerDelD extends Ice._ObjectDelD implements _ServerDel {
	public boolean joinTeam(final Ice.Identity id, final String nick,
			final int team, java.util.Map<String, String> __ctx,
			Ice.Instrumentation.InvocationObserver __observer)
			throws IceInternal.LocalExceptionWrapper {
		final Ice.Current __current = new Ice.Current();
		__initCurrent(__current, "joinTeam", Ice.OperationMode.Normal, __ctx);
		final Ice.BooleanHolder __result = new Ice.BooleanHolder();
		IceInternal.Direct __direct = null;
		try {
			__direct = new IceInternal.Direct(__current) {
				public Ice.DispatchStatus run(Ice.Object __obj) {
					Server __servant = null;
					if (__obj == null || __obj instanceof Server) {
						__servant = (Server) __obj;
					} else {
						throw new Ice.OperationNotExistException(__current.id,
								__current.facet, __current.operation);
					}
					__result.value = __servant.joinTeam(id, nick, team,
							__current);
					return Ice.DispatchStatus.DispatchOK;
				}
			};
			try {
				Ice.DispatchStatus __status = __direct.getServant()
						.__collocDispatch(__direct);
				if (__status == Ice.DispatchStatus.DispatchUserException) {
					__direct.throwUserException();
				}
				assert __status == Ice.DispatchStatus.DispatchOK;
				return __result.value;
			} finally {
				__direct.destroy();
			}
		} catch (Ice.SystemException __ex) {
			throw __ex;
		} catch (java.lang.Throwable __ex) {
			IceInternal.LocalExceptionWrapper.throwWrapper(__ex);
		}
		return __result.value;
	}

	public void leaveGame(final Ice.Identity id,
			java.util.Map<String, String> __ctx,
			Ice.Instrumentation.InvocationObserver __observer)
			throws IceInternal.LocalExceptionWrapper {
		final Ice.Current __current = new Ice.Current();
		__initCurrent(__current, "leaveGame", Ice.OperationMode.Normal, __ctx);
		IceInternal.Direct __direct = null;
		try {
			__direct = new IceInternal.Direct(__current) {
				public Ice.DispatchStatus run(Ice.Object __obj) {
					Server __servant = null;
					if (__obj == null || __obj instanceof Server) {
						__servant = (Server) __obj;
					} else {
						throw new Ice.OperationNotExistException(__current.id,
								__current.facet, __current.operation);
					}
					__servant.leaveGame(id, __current);
					return Ice.DispatchStatus.DispatchOK;
				}
			};
			try {
				Ice.DispatchStatus __status = __direct.getServant()
						.__collocDispatch(__direct);
				if (__status == Ice.DispatchStatus.DispatchUserException) {
					__direct.throwUserException();
				}
				assert __status == Ice.DispatchStatus.DispatchOK;
			} finally {
				__direct.destroy();
			}
		} catch (Ice.SystemException __ex) {
			throw __ex;
		} catch (java.lang.Throwable __ex) {
			IceInternal.LocalExceptionWrapper.throwWrapper(__ex);
		}
	}

	public void message(final Ice.Identity id, final String msg,
			java.util.Map<String, String> __ctx,
			Ice.Instrumentation.InvocationObserver __observer)
			throws IceInternal.LocalExceptionWrapper {
		final Ice.Current __current = new Ice.Current();
		__initCurrent(__current, "message", Ice.OperationMode.Normal, __ctx);
		IceInternal.Direct __direct = null;
		try {
			__direct = new IceInternal.Direct(__current) {
				public Ice.DispatchStatus run(Ice.Object __obj) {
					Server __servant = null;
					if (__obj == null || __obj instanceof Server) {
						__servant = (Server) __obj;
					} else {
						throw new Ice.OperationNotExistException(__current.id,
								__current.facet, __current.operation);
					}
					__servant.message(id, msg, __current);
					return Ice.DispatchStatus.DispatchOK;
				}
			};
			try {
				Ice.DispatchStatus __status = __direct.getServant()
						.__collocDispatch(__direct);
				if (__status == Ice.DispatchStatus.DispatchUserException) {
					__direct.throwUserException();
				}
				assert __status == Ice.DispatchStatus.DispatchOK;
			} finally {
				__direct.destroy();
			}
		} catch (Ice.SystemException __ex) {
			throw __ex;
		} catch (java.lang.Throwable __ex) {
			IceInternal.LocalExceptionWrapper.throwWrapper(__ex);
		}
	}

	public void movementProposal(final Ice.Identity id, final Movement mov,
			java.util.Map<String, String> __ctx,
			Ice.Instrumentation.InvocationObserver __observer)
			throws IceInternal.LocalExceptionWrapper {
		final Ice.Current __current = new Ice.Current();
		__initCurrent(__current, "movementProposal", Ice.OperationMode.Normal,
				__ctx);
		IceInternal.Direct __direct = null;
		try {
			__direct = new IceInternal.Direct(__current) {
				public Ice.DispatchStatus run(Ice.Object __obj) {
					Server __servant = null;
					if (__obj == null || __obj instanceof Server) {
						__servant = (Server) __obj;
					} else {
						throw new Ice.OperationNotExistException(__current.id,
								__current.facet, __current.operation);
					}
					__servant.movementProposal(id, mov, __current);
					return Ice.DispatchStatus.DispatchOK;
				}
			};
			try {
				Ice.DispatchStatus __status = __direct.getServant()
						.__collocDispatch(__direct);
				if (__status == Ice.DispatchStatus.DispatchUserException) {
					__direct.throwUserException();
				}
				assert __status == Ice.DispatchStatus.DispatchOK;
			} finally {
				__direct.destroy();
			}
		} catch (Ice.SystemException __ex) {
			throw __ex;
		} catch (java.lang.Throwable __ex) {
			IceInternal.LocalExceptionWrapper.throwWrapper(__ex);
		}
	}

	public void teamComplete(final Ice.Identity id,
			java.util.Map<String, String> __ctx,
			Ice.Instrumentation.InvocationObserver __observer)
			throws IceInternal.LocalExceptionWrapper {
		final Ice.Current __current = new Ice.Current();
		__initCurrent(__current, "teamComplete", Ice.OperationMode.Idempotent,
				__ctx);
		IceInternal.Direct __direct = null;
		try {
			__direct = new IceInternal.Direct(__current) {
				public Ice.DispatchStatus run(Ice.Object __obj) {
					Server __servant = null;
					if (__obj == null || __obj instanceof Server) {
						__servant = (Server) __obj;
					} else {
						throw new Ice.OperationNotExistException(__current.id,
								__current.facet, __current.operation);
					}
					__servant.teamComplete(id, __current);
					return Ice.DispatchStatus.DispatchOK;
				}
			};
			try {
				Ice.DispatchStatus __status = __direct.getServant()
						.__collocDispatch(__direct);
				if (__status == Ice.DispatchStatus.DispatchUserException) {
					__direct.throwUserException();
				}
				assert __status == Ice.DispatchStatus.DispatchOK;
			} finally {
				__direct.destroy();
			}
		} catch (Ice.SystemException __ex) {
			throw __ex;
		} catch (java.lang.Throwable __ex) {
			IceInternal.LocalExceptionWrapper.throwWrapper(__ex);
		}
	}
}
