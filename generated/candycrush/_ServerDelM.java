// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `CandyCrush.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package candycrush;

public final class _ServerDelM extends Ice._ObjectDelM implements _ServerDel {
	public boolean joinTeam(Ice.Identity id, String nick, int team,
			java.util.Map<String, String> __ctx,
			Ice.Instrumentation.InvocationObserver __observer)
			throws IceInternal.LocalExceptionWrapper {
		IceInternal.Outgoing __og = __handler.getOutgoing("joinTeam",
				Ice.OperationMode.Normal, __ctx, __observer);
		try {
			try {
				IceInternal.BasicStream __os = __og
						.startWriteParams(Ice.FormatType.DefaultFormat);
				id.__write(__os);
				__os.writeString(nick);
				__os.writeInt(team);
				__og.endWriteParams();
			} catch (Ice.LocalException __ex) {
				__og.abort(__ex);
			}
			boolean __ok = __og.invoke();
			try {
				if (!__ok) {
					try {
						__og.throwUserException();
					} catch (Ice.UserException __ex) {
						throw new Ice.UnknownUserException(__ex.ice_name(),
								__ex);
					}
				}
				IceInternal.BasicStream __is = __og.startReadParams();
				boolean __ret;
				__ret = __is.readBool();
				__og.endReadParams();
				return __ret;
			} catch (Ice.LocalException __ex) {
				throw new IceInternal.LocalExceptionWrapper(__ex, false);
			}
		} finally {
			__handler.reclaimOutgoing(__og);
		}
	}

	public void leaveGame(Ice.Identity id, java.util.Map<String, String> __ctx,
			Ice.Instrumentation.InvocationObserver __observer)
			throws IceInternal.LocalExceptionWrapper {
		IceInternal.Outgoing __og = __handler.getOutgoing("leaveGame",
				Ice.OperationMode.Normal, __ctx, __observer);
		try {
			try {
				IceInternal.BasicStream __os = __og
						.startWriteParams(Ice.FormatType.DefaultFormat);
				id.__write(__os);
				__og.endWriteParams();
			} catch (Ice.LocalException __ex) {
				__og.abort(__ex);
			}
			boolean __ok = __og.invoke();
			if (__og.hasResponse()) {
				try {
					if (!__ok) {
						try {
							__og.throwUserException();
						} catch (Ice.UserException __ex) {
							throw new Ice.UnknownUserException(__ex.ice_name(),
									__ex);
						}
					}
					__og.readEmptyParams();
				} catch (Ice.LocalException __ex) {
					throw new IceInternal.LocalExceptionWrapper(__ex, false);
				}
			}
		} finally {
			__handler.reclaimOutgoing(__og);
		}
	}

	public void message(Ice.Identity id, String msg,
			java.util.Map<String, String> __ctx,
			Ice.Instrumentation.InvocationObserver __observer)
			throws IceInternal.LocalExceptionWrapper {
		IceInternal.Outgoing __og = __handler.getOutgoing("message",
				Ice.OperationMode.Normal, __ctx, __observer);
		try {
			try {
				IceInternal.BasicStream __os = __og
						.startWriteParams(Ice.FormatType.DefaultFormat);
				id.__write(__os);
				__os.writeString(msg);
				__og.endWriteParams();
			} catch (Ice.LocalException __ex) {
				__og.abort(__ex);
			}
			boolean __ok = __og.invoke();
			if (__og.hasResponse()) {
				try {
					if (!__ok) {
						try {
							__og.throwUserException();
						} catch (Ice.UserException __ex) {
							throw new Ice.UnknownUserException(__ex.ice_name(),
									__ex);
						}
					}
					__og.readEmptyParams();
				} catch (Ice.LocalException __ex) {
					throw new IceInternal.LocalExceptionWrapper(__ex, false);
				}
			}
		} finally {
			__handler.reclaimOutgoing(__og);
		}
	}

	public void movementProposal(Ice.Identity id, Movement mov,
			java.util.Map<String, String> __ctx,
			Ice.Instrumentation.InvocationObserver __observer)
			throws IceInternal.LocalExceptionWrapper {
		IceInternal.Outgoing __og = __handler.getOutgoing("movementProposal",
				Ice.OperationMode.Normal, __ctx, __observer);
		try {
			try {
				IceInternal.BasicStream __os = __og
						.startWriteParams(Ice.FormatType.DefaultFormat);
				id.__write(__os);
				mov.__write(__os);
				__og.endWriteParams();
			} catch (Ice.LocalException __ex) {
				__og.abort(__ex);
			}
			boolean __ok = __og.invoke();
			if (__og.hasResponse()) {
				try {
					if (!__ok) {
						try {
							__og.throwUserException();
						} catch (Ice.UserException __ex) {
							throw new Ice.UnknownUserException(__ex.ice_name(),
									__ex);
						}
					}
					__og.readEmptyParams();
				} catch (Ice.LocalException __ex) {
					throw new IceInternal.LocalExceptionWrapper(__ex, false);
				}
			}
		} finally {
			__handler.reclaimOutgoing(__og);
		}
	}

	public void teamComplete(Ice.Identity id,
			java.util.Map<String, String> __ctx,
			Ice.Instrumentation.InvocationObserver __observer)
			throws IceInternal.LocalExceptionWrapper {
		IceInternal.Outgoing __og = __handler.getOutgoing("teamComplete",
				Ice.OperationMode.Idempotent, __ctx, __observer);
		try {
			try {
				IceInternal.BasicStream __os = __og
						.startWriteParams(Ice.FormatType.DefaultFormat);
				id.__write(__os);
				__og.endWriteParams();
			} catch (Ice.LocalException __ex) {
				__og.abort(__ex);
			}
			boolean __ok = __og.invoke();
			if (__og.hasResponse()) {
				try {
					if (!__ok) {
						try {
							__og.throwUserException();
						} catch (Ice.UserException __ex) {
							throw new Ice.UnknownUserException(__ex.ice_name(),
									__ex);
						}
					}
					__og.readEmptyParams();
				} catch (Ice.LocalException __ex) {
					throw new IceInternal.LocalExceptionWrapper(__ex, false);
				}
			}
		} finally {
			__handler.reclaimOutgoing(__og);
		}
	}
}
