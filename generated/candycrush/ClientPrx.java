// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `CandyCrush.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package candycrush;

public interface ClientPrx extends Ice.ObjectPrx {
	public void newParticipant(String nick, int team);

	public void newParticipant(String nick, int team,
			java.util.Map<String, String> __ctx);

	public Ice.AsyncResult begin_newParticipant(String nick, int team);

	public Ice.AsyncResult begin_newParticipant(String nick, int team,
			java.util.Map<String, String> __ctx);

	public Ice.AsyncResult begin_newParticipant(String nick, int team,
			Ice.Callback __cb);

	public Ice.AsyncResult begin_newParticipant(String nick, int team,
			java.util.Map<String, String> __ctx, Ice.Callback __cb);

	public Ice.AsyncResult begin_newParticipant(String nick, int team,
			Callback_Client_newParticipant __cb);

	public Ice.AsyncResult begin_newParticipant(String nick, int team,
			java.util.Map<String, String> __ctx,
			Callback_Client_newParticipant __cb);

	public void end_newParticipant(Ice.AsyncResult __result);

	public void participantLeft(String nick, int team);

	public void participantLeft(String nick, int team,
			java.util.Map<String, String> __ctx);

	public Ice.AsyncResult begin_participantLeft(String nick, int team);

	public Ice.AsyncResult begin_participantLeft(String nick, int team,
			java.util.Map<String, String> __ctx);

	public Ice.AsyncResult begin_participantLeft(String nick, int team,
			Ice.Callback __cb);

	public Ice.AsyncResult begin_participantLeft(String nick, int team,
			java.util.Map<String, String> __ctx, Ice.Callback __cb);

	public Ice.AsyncResult begin_participantLeft(String nick, int team,
			Callback_Client_participantLeft __cb);

	public Ice.AsyncResult begin_participantLeft(String nick, int team,
			java.util.Map<String, String> __ctx,
			Callback_Client_participantLeft __cb);

	public void end_participantLeft(Ice.AsyncResult __result);

	public void startGame();

	public void startGame(java.util.Map<String, String> __ctx);

	public Ice.AsyncResult begin_startGame();

	public Ice.AsyncResult begin_startGame(java.util.Map<String, String> __ctx);

	public Ice.AsyncResult begin_startGame(Ice.Callback __cb);

	public Ice.AsyncResult begin_startGame(java.util.Map<String, String> __ctx,
			Ice.Callback __cb);

	public Ice.AsyncResult begin_startGame(Callback_Client_startGame __cb);

	public Ice.AsyncResult begin_startGame(java.util.Map<String, String> __ctx,
			Callback_Client_startGame __cb);

	public void end_startGame(Ice.AsyncResult __result);

	public void endGame(int team);

	public void endGame(int team, java.util.Map<String, String> __ctx);

	public Ice.AsyncResult begin_endGame(int team);

	public Ice.AsyncResult begin_endGame(int team,
			java.util.Map<String, String> __ctx);

	public Ice.AsyncResult begin_endGame(int team, Ice.Callback __cb);

	public Ice.AsyncResult begin_endGame(int team,
			java.util.Map<String, String> __ctx, Ice.Callback __cb);

	public Ice.AsyncResult begin_endGame(int team, Callback_Client_endGame __cb);

	public Ice.AsyncResult begin_endGame(int team,
			java.util.Map<String, String> __ctx, Callback_Client_endGame __cb);

	public void end_endGame(Ice.AsyncResult __result);

	public void setBoard(int[][] boardValues);

	public void setBoard(int[][] boardValues,
			java.util.Map<String, String> __ctx);

	public Ice.AsyncResult begin_setBoard(int[][] boardValues);

	public Ice.AsyncResult begin_setBoard(int[][] boardValues,
			java.util.Map<String, String> __ctx);

	public Ice.AsyncResult begin_setBoard(int[][] boardValues, Ice.Callback __cb);

	public Ice.AsyncResult begin_setBoard(int[][] boardValues,
			java.util.Map<String, String> __ctx, Ice.Callback __cb);

	public Ice.AsyncResult begin_setBoard(int[][] boardValues,
			Callback_Client_setBoard __cb);

	public Ice.AsyncResult begin_setBoard(int[][] boardValues,
			java.util.Map<String, String> __ctx, Callback_Client_setBoard __cb);

	public void end_setBoard(Ice.AsyncResult __result);

	public void turn(int team);

	public void turn(int team, java.util.Map<String, String> __ctx);

	public Ice.AsyncResult begin_turn(int team);

	public Ice.AsyncResult begin_turn(int team,
			java.util.Map<String, String> __ctx);

	public Ice.AsyncResult begin_turn(int team, Ice.Callback __cb);

	public Ice.AsyncResult begin_turn(int team,
			java.util.Map<String, String> __ctx, Ice.Callback __cb);

	public Ice.AsyncResult begin_turn(int team, Callback_Client_turn __cb);

	public Ice.AsyncResult begin_turn(int team,
			java.util.Map<String, String> __ctx, Callback_Client_turn __cb);

	public void end_turn(Ice.AsyncResult __result);

	public void log(String message);

	public void log(String message, java.util.Map<String, String> __ctx);

	public Ice.AsyncResult begin_log(String message);

	public Ice.AsyncResult begin_log(String message,
			java.util.Map<String, String> __ctx);

	public Ice.AsyncResult begin_log(String message, Ice.Callback __cb);

	public Ice.AsyncResult begin_log(String message,
			java.util.Map<String, String> __ctx, Ice.Callback __cb);

	public Ice.AsyncResult begin_log(String message, Callback_Client_log __cb);

	public Ice.AsyncResult begin_log(String message,
			java.util.Map<String, String> __ctx, Callback_Client_log __cb);

	public void end_log(Ice.AsyncResult __result);

	public void customLog(String message, int code);

	public void customLog(String message, int code,
			java.util.Map<String, String> __ctx);

	public Ice.AsyncResult begin_customLog(String message, int code);

	public Ice.AsyncResult begin_customLog(String message, int code,
			java.util.Map<String, String> __ctx);

	public Ice.AsyncResult begin_customLog(String message, int code,
			Ice.Callback __cb);

	public Ice.AsyncResult begin_customLog(String message, int code,
			java.util.Map<String, String> __ctx, Ice.Callback __cb);

	public Ice.AsyncResult begin_customLog(String message, int code,
			Callback_Client_customLog __cb);

	public Ice.AsyncResult begin_customLog(String message, int code,
			java.util.Map<String, String> __ctx, Callback_Client_customLog __cb);

	public void end_customLog(Ice.AsyncResult __result);

	public void logStatus(String statusMessage);

	public void logStatus(String statusMessage,
			java.util.Map<String, String> __ctx);

	public Ice.AsyncResult begin_logStatus(String statusMessage);

	public Ice.AsyncResult begin_logStatus(String statusMessage,
			java.util.Map<String, String> __ctx);

	public Ice.AsyncResult begin_logStatus(String statusMessage,
			Ice.Callback __cb);

	public Ice.AsyncResult begin_logStatus(String statusMessage,
			java.util.Map<String, String> __ctx, Ice.Callback __cb);

	public Ice.AsyncResult begin_logStatus(String statusMessage,
			Callback_Client_logStatus __cb);

	public Ice.AsyncResult begin_logStatus(String statusMessage,
			java.util.Map<String, String> __ctx, Callback_Client_logStatus __cb);

	public void end_logStatus(Ice.AsyncResult __result);

	public void makeMovement(Movement mov);

	public void makeMovement(Movement mov, java.util.Map<String, String> __ctx);

	public Ice.AsyncResult begin_makeMovement(Movement mov);

	public Ice.AsyncResult begin_makeMovement(Movement mov,
			java.util.Map<String, String> __ctx);

	public Ice.AsyncResult begin_makeMovement(Movement mov, Ice.Callback __cb);

	public Ice.AsyncResult begin_makeMovement(Movement mov,
			java.util.Map<String, String> __ctx, Ice.Callback __cb);

	public Ice.AsyncResult begin_makeMovement(Movement mov,
			Callback_Client_makeMovement __cb);

	public Ice.AsyncResult begin_makeMovement(Movement mov,
			java.util.Map<String, String> __ctx,
			Callback_Client_makeMovement __cb);

	public void end_makeMovement(Ice.AsyncResult __result);

	public void fillNewSquares(Square[] newSquares);

	public void fillNewSquares(Square[] newSquares,
			java.util.Map<String, String> __ctx);

	public Ice.AsyncResult begin_fillNewSquares(Square[] newSquares);

	public Ice.AsyncResult begin_fillNewSquares(Square[] newSquares,
			java.util.Map<String, String> __ctx);

	public Ice.AsyncResult begin_fillNewSquares(Square[] newSquares,
			Ice.Callback __cb);

	public Ice.AsyncResult begin_fillNewSquares(Square[] newSquares,
			java.util.Map<String, String> __ctx, Ice.Callback __cb);

	public Ice.AsyncResult begin_fillNewSquares(Square[] newSquares,
			Callback_Client_fillNewSquares __cb);

	public Ice.AsyncResult begin_fillNewSquares(Square[] newSquares,
			java.util.Map<String, String> __ctx,
			Callback_Client_fillNewSquares __cb);

	public void end_fillNewSquares(Ice.AsyncResult __result);

	public void score(int team, int scored);

	public void score(int team, int scored, java.util.Map<String, String> __ctx);

	public Ice.AsyncResult begin_score(int team, int scored);

	public Ice.AsyncResult begin_score(int team, int scored,
			java.util.Map<String, String> __ctx);

	public Ice.AsyncResult begin_score(int team, int scored, Ice.Callback __cb);

	public Ice.AsyncResult begin_score(int team, int scored,
			java.util.Map<String, String> __ctx, Ice.Callback __cb);

	public Ice.AsyncResult begin_score(int team, int scored,
			Callback_Client_score __cb);

	public Ice.AsyncResult begin_score(int team, int scored,
			java.util.Map<String, String> __ctx, Callback_Client_score __cb);

	public void end_score(Ice.AsyncResult __result);

	public void receiveMessage(String from, String message);

	public void receiveMessage(String from, String message,
			java.util.Map<String, String> __ctx);

	public Ice.AsyncResult begin_receiveMessage(String from, String message);

	public Ice.AsyncResult begin_receiveMessage(String from, String message,
			java.util.Map<String, String> __ctx);

	public Ice.AsyncResult begin_receiveMessage(String from, String message,
			Ice.Callback __cb);

	public Ice.AsyncResult begin_receiveMessage(String from, String message,
			java.util.Map<String, String> __ctx, Ice.Callback __cb);

	public Ice.AsyncResult begin_receiveMessage(String from, String message,
			Callback_Client_receiveMessage __cb);

	public Ice.AsyncResult begin_receiveMessage(String from, String message,
			java.util.Map<String, String> __ctx,
			Callback_Client_receiveMessage __cb);

	public void end_receiveMessage(Ice.AsyncResult __result);
}
