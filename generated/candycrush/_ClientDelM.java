// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `CandyCrush.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package candycrush;

public final class _ClientDelM extends Ice._ObjectDelM implements _ClientDel {
	public void customLog(String message, int code,
			java.util.Map<String, String> __ctx,
			Ice.Instrumentation.InvocationObserver __observer)
			throws IceInternal.LocalExceptionWrapper {
		IceInternal.Outgoing __og = __handler.getOutgoing("customLog",
				Ice.OperationMode.Normal, __ctx, __observer);
		try {
			try {
				IceInternal.BasicStream __os = __og
						.startWriteParams(Ice.FormatType.DefaultFormat);
				__os.writeString(message);
				__os.writeInt(code);
				__og.endWriteParams();
			} catch (Ice.LocalException __ex) {
				__og.abort(__ex);
			}
			boolean __ok = __og.invoke();
			if (__og.hasResponse()) {
				try {
					if (!__ok) {
						try {
							__og.throwUserException();
						} catch (Ice.UserException __ex) {
							throw new Ice.UnknownUserException(__ex.ice_name(),
									__ex);
						}
					}
					__og.readEmptyParams();
				} catch (Ice.LocalException __ex) {
					throw new IceInternal.LocalExceptionWrapper(__ex, false);
				}
			}
		} finally {
			__handler.reclaimOutgoing(__og);
		}
	}

	public void endGame(int team, java.util.Map<String, String> __ctx,
			Ice.Instrumentation.InvocationObserver __observer)
			throws IceInternal.LocalExceptionWrapper {
		IceInternal.Outgoing __og = __handler.getOutgoing("endGame",
				Ice.OperationMode.Normal, __ctx, __observer);
		try {
			try {
				IceInternal.BasicStream __os = __og
						.startWriteParams(Ice.FormatType.DefaultFormat);
				__os.writeInt(team);
				__og.endWriteParams();
			} catch (Ice.LocalException __ex) {
				__og.abort(__ex);
			}
			boolean __ok = __og.invoke();
			if (__og.hasResponse()) {
				try {
					if (!__ok) {
						try {
							__og.throwUserException();
						} catch (Ice.UserException __ex) {
							throw new Ice.UnknownUserException(__ex.ice_name(),
									__ex);
						}
					}
					__og.readEmptyParams();
				} catch (Ice.LocalException __ex) {
					throw new IceInternal.LocalExceptionWrapper(__ex, false);
				}
			}
		} finally {
			__handler.reclaimOutgoing(__og);
		}
	}

	public void fillNewSquares(Square[] newSquares,
			java.util.Map<String, String> __ctx,
			Ice.Instrumentation.InvocationObserver __observer)
			throws IceInternal.LocalExceptionWrapper {
		IceInternal.Outgoing __og = __handler.getOutgoing("fillNewSquares",
				Ice.OperationMode.Idempotent, __ctx, __observer);
		try {
			try {
				IceInternal.BasicStream __os = __og
						.startWriteParams(Ice.FormatType.DefaultFormat);
				SquareListHelper.write(__os, newSquares);
				__og.endWriteParams();
			} catch (Ice.LocalException __ex) {
				__og.abort(__ex);
			}
			boolean __ok = __og.invoke();
			if (__og.hasResponse()) {
				try {
					if (!__ok) {
						try {
							__og.throwUserException();
						} catch (Ice.UserException __ex) {
							throw new Ice.UnknownUserException(__ex.ice_name(),
									__ex);
						}
					}
					__og.readEmptyParams();
				} catch (Ice.LocalException __ex) {
					throw new IceInternal.LocalExceptionWrapper(__ex, false);
				}
			}
		} finally {
			__handler.reclaimOutgoing(__og);
		}
	}

	public void log(String message, java.util.Map<String, String> __ctx,
			Ice.Instrumentation.InvocationObserver __observer)
			throws IceInternal.LocalExceptionWrapper {
		IceInternal.Outgoing __og = __handler.getOutgoing("log",
				Ice.OperationMode.Normal, __ctx, __observer);
		try {
			try {
				IceInternal.BasicStream __os = __og
						.startWriteParams(Ice.FormatType.DefaultFormat);
				__os.writeString(message);
				__og.endWriteParams();
			} catch (Ice.LocalException __ex) {
				__og.abort(__ex);
			}
			boolean __ok = __og.invoke();
			if (__og.hasResponse()) {
				try {
					if (!__ok) {
						try {
							__og.throwUserException();
						} catch (Ice.UserException __ex) {
							throw new Ice.UnknownUserException(__ex.ice_name(),
									__ex);
						}
					}
					__og.readEmptyParams();
				} catch (Ice.LocalException __ex) {
					throw new IceInternal.LocalExceptionWrapper(__ex, false);
				}
			}
		} finally {
			__handler.reclaimOutgoing(__og);
		}
	}

	public void logStatus(String statusMessage,
			java.util.Map<String, String> __ctx,
			Ice.Instrumentation.InvocationObserver __observer)
			throws IceInternal.LocalExceptionWrapper {
		IceInternal.Outgoing __og = __handler.getOutgoing("logStatus",
				Ice.OperationMode.Normal, __ctx, __observer);
		try {
			try {
				IceInternal.BasicStream __os = __og
						.startWriteParams(Ice.FormatType.DefaultFormat);
				__os.writeString(statusMessage);
				__og.endWriteParams();
			} catch (Ice.LocalException __ex) {
				__og.abort(__ex);
			}
			boolean __ok = __og.invoke();
			if (__og.hasResponse()) {
				try {
					if (!__ok) {
						try {
							__og.throwUserException();
						} catch (Ice.UserException __ex) {
							throw new Ice.UnknownUserException(__ex.ice_name(),
									__ex);
						}
					}
					__og.readEmptyParams();
				} catch (Ice.LocalException __ex) {
					throw new IceInternal.LocalExceptionWrapper(__ex, false);
				}
			}
		} finally {
			__handler.reclaimOutgoing(__og);
		}
	}

	public void makeMovement(Movement mov, java.util.Map<String, String> __ctx,
			Ice.Instrumentation.InvocationObserver __observer)
			throws IceInternal.LocalExceptionWrapper {
		IceInternal.Outgoing __og = __handler.getOutgoing("makeMovement",
				Ice.OperationMode.Normal, __ctx, __observer);
		try {
			try {
				IceInternal.BasicStream __os = __og
						.startWriteParams(Ice.FormatType.DefaultFormat);
				mov.__write(__os);
				__og.endWriteParams();
			} catch (Ice.LocalException __ex) {
				__og.abort(__ex);
			}
			boolean __ok = __og.invoke();
			if (__og.hasResponse()) {
				try {
					if (!__ok) {
						try {
							__og.throwUserException();
						} catch (Ice.UserException __ex) {
							throw new Ice.UnknownUserException(__ex.ice_name(),
									__ex);
						}
					}
					__og.readEmptyParams();
				} catch (Ice.LocalException __ex) {
					throw new IceInternal.LocalExceptionWrapper(__ex, false);
				}
			}
		} finally {
			__handler.reclaimOutgoing(__og);
		}
	}

	public void newParticipant(String nick, int team,
			java.util.Map<String, String> __ctx,
			Ice.Instrumentation.InvocationObserver __observer)
			throws IceInternal.LocalExceptionWrapper {
		IceInternal.Outgoing __og = __handler.getOutgoing("newParticipant",
				Ice.OperationMode.Normal, __ctx, __observer);
		try {
			try {
				IceInternal.BasicStream __os = __og
						.startWriteParams(Ice.FormatType.DefaultFormat);
				__os.writeString(nick);
				__os.writeInt(team);
				__og.endWriteParams();
			} catch (Ice.LocalException __ex) {
				__og.abort(__ex);
			}
			boolean __ok = __og.invoke();
			if (__og.hasResponse()) {
				try {
					if (!__ok) {
						try {
							__og.throwUserException();
						} catch (Ice.UserException __ex) {
							throw new Ice.UnknownUserException(__ex.ice_name(),
									__ex);
						}
					}
					__og.readEmptyParams();
				} catch (Ice.LocalException __ex) {
					throw new IceInternal.LocalExceptionWrapper(__ex, false);
				}
			}
		} finally {
			__handler.reclaimOutgoing(__og);
		}
	}

	public void participantLeft(String nick, int team,
			java.util.Map<String, String> __ctx,
			Ice.Instrumentation.InvocationObserver __observer)
			throws IceInternal.LocalExceptionWrapper {
		IceInternal.Outgoing __og = __handler.getOutgoing("participantLeft",
				Ice.OperationMode.Normal, __ctx, __observer);
		try {
			try {
				IceInternal.BasicStream __os = __og
						.startWriteParams(Ice.FormatType.DefaultFormat);
				__os.writeString(nick);
				__os.writeInt(team);
				__og.endWriteParams();
			} catch (Ice.LocalException __ex) {
				__og.abort(__ex);
			}
			boolean __ok = __og.invoke();
			if (__og.hasResponse()) {
				try {
					if (!__ok) {
						try {
							__og.throwUserException();
						} catch (Ice.UserException __ex) {
							throw new Ice.UnknownUserException(__ex.ice_name(),
									__ex);
						}
					}
					__og.readEmptyParams();
				} catch (Ice.LocalException __ex) {
					throw new IceInternal.LocalExceptionWrapper(__ex, false);
				}
			}
		} finally {
			__handler.reclaimOutgoing(__og);
		}
	}

	public void receiveMessage(String from, String message,
			java.util.Map<String, String> __ctx,
			Ice.Instrumentation.InvocationObserver __observer)
			throws IceInternal.LocalExceptionWrapper {
		IceInternal.Outgoing __og = __handler.getOutgoing("receiveMessage",
				Ice.OperationMode.Normal, __ctx, __observer);
		try {
			try {
				IceInternal.BasicStream __os = __og
						.startWriteParams(Ice.FormatType.DefaultFormat);
				__os.writeString(from);
				__os.writeString(message);
				__og.endWriteParams();
			} catch (Ice.LocalException __ex) {
				__og.abort(__ex);
			}
			boolean __ok = __og.invoke();
			if (__og.hasResponse()) {
				try {
					if (!__ok) {
						try {
							__og.throwUserException();
						} catch (Ice.UserException __ex) {
							throw new Ice.UnknownUserException(__ex.ice_name(),
									__ex);
						}
					}
					__og.readEmptyParams();
				} catch (Ice.LocalException __ex) {
					throw new IceInternal.LocalExceptionWrapper(__ex, false);
				}
			}
		} finally {
			__handler.reclaimOutgoing(__og);
		}
	}

	public void score(int team, int scored,
			java.util.Map<String, String> __ctx,
			Ice.Instrumentation.InvocationObserver __observer)
			throws IceInternal.LocalExceptionWrapper {
		IceInternal.Outgoing __og = __handler.getOutgoing("score",
				Ice.OperationMode.Normal, __ctx, __observer);
		try {
			try {
				IceInternal.BasicStream __os = __og
						.startWriteParams(Ice.FormatType.DefaultFormat);
				__os.writeInt(team);
				__os.writeInt(scored);
				__og.endWriteParams();
			} catch (Ice.LocalException __ex) {
				__og.abort(__ex);
			}
			boolean __ok = __og.invoke();
			if (__og.hasResponse()) {
				try {
					if (!__ok) {
						try {
							__og.throwUserException();
						} catch (Ice.UserException __ex) {
							throw new Ice.UnknownUserException(__ex.ice_name(),
									__ex);
						}
					}
					__og.readEmptyParams();
				} catch (Ice.LocalException __ex) {
					throw new IceInternal.LocalExceptionWrapper(__ex, false);
				}
			}
		} finally {
			__handler.reclaimOutgoing(__og);
		}
	}

	public void setBoard(int[][] boardValues,
			java.util.Map<String, String> __ctx,
			Ice.Instrumentation.InvocationObserver __observer)
			throws IceInternal.LocalExceptionWrapper {
		IceInternal.Outgoing __og = __handler.getOutgoing("setBoard",
				Ice.OperationMode.Idempotent, __ctx, __observer);
		try {
			try {
				IceInternal.BasicStream __os = __og
						.startWriteParams(Ice.FormatType.DefaultFormat);
				BoardMatrixHelper.write(__os, boardValues);
				__og.endWriteParams();
			} catch (Ice.LocalException __ex) {
				__og.abort(__ex);
			}
			boolean __ok = __og.invoke();
			if (__og.hasResponse()) {
				try {
					if (!__ok) {
						try {
							__og.throwUserException();
						} catch (Ice.UserException __ex) {
							throw new Ice.UnknownUserException(__ex.ice_name(),
									__ex);
						}
					}
					__og.readEmptyParams();
				} catch (Ice.LocalException __ex) {
					throw new IceInternal.LocalExceptionWrapper(__ex, false);
				}
			}
		} finally {
			__handler.reclaimOutgoing(__og);
		}
	}

	public void startGame(java.util.Map<String, String> __ctx,
			Ice.Instrumentation.InvocationObserver __observer)
			throws IceInternal.LocalExceptionWrapper {
		IceInternal.Outgoing __og = __handler.getOutgoing("startGame",
				Ice.OperationMode.Normal, __ctx, __observer);
		try {
			__og.writeEmptyParams();
			boolean __ok = __og.invoke();
			if (__og.hasResponse()) {
				try {
					if (!__ok) {
						try {
							__og.throwUserException();
						} catch (Ice.UserException __ex) {
							throw new Ice.UnknownUserException(__ex.ice_name(),
									__ex);
						}
					}
					__og.readEmptyParams();
				} catch (Ice.LocalException __ex) {
					throw new IceInternal.LocalExceptionWrapper(__ex, false);
				}
			}
		} finally {
			__handler.reclaimOutgoing(__og);
		}
	}

	public void turn(int team, java.util.Map<String, String> __ctx,
			Ice.Instrumentation.InvocationObserver __observer)
			throws IceInternal.LocalExceptionWrapper {
		IceInternal.Outgoing __og = __handler.getOutgoing("turn",
				Ice.OperationMode.Idempotent, __ctx, __observer);
		try {
			try {
				IceInternal.BasicStream __os = __og
						.startWriteParams(Ice.FormatType.DefaultFormat);
				__os.writeInt(team);
				__og.endWriteParams();
			} catch (Ice.LocalException __ex) {
				__og.abort(__ex);
			}
			boolean __ok = __og.invoke();
			if (__og.hasResponse()) {
				try {
					if (!__ok) {
						try {
							__og.throwUserException();
						} catch (Ice.UserException __ex) {
							throw new Ice.UnknownUserException(__ex.ice_name(),
									__ex);
						}
					}
					__og.readEmptyParams();
				} catch (Ice.LocalException __ex) {
					throw new IceInternal.LocalExceptionWrapper(__ex, false);
				}
			}
		} finally {
			__handler.reclaimOutgoing(__og);
		}
	}
}
