// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `CandyCrush.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package candycrush;

public abstract class _ClientDisp extends Ice.ObjectImpl implements Client {
	protected void ice_copyStateFrom(Ice.Object __obj)
			throws java.lang.CloneNotSupportedException {
		throw new java.lang.CloneNotSupportedException();
	}

	public static final String[] __ids = { "::Ice::Object",
			"::candycrush::Client" };

	public boolean ice_isA(String s) {
		return java.util.Arrays.binarySearch(__ids, s) >= 0;
	}

	public boolean ice_isA(String s, Ice.Current __current) {
		return java.util.Arrays.binarySearch(__ids, s) >= 0;
	}

	public String[] ice_ids() {
		return __ids;
	}

	public String[] ice_ids(Ice.Current __current) {
		return __ids;
	}

	public String ice_id() {
		return __ids[1];
	}

	public String ice_id(Ice.Current __current) {
		return __ids[1];
	}

	public static String ice_staticId() {
		return __ids[1];
	}

	public final void customLog(String message, int code) {
		customLog(message, code, null);
	}

	public final void endGame(int team) {
		endGame(team, null);
	}

	public final void fillNewSquares(Square[] newSquares) {
		fillNewSquares(newSquares, null);
	}

	public final void log(String message) {
		log(message, null);
	}

	public final void logStatus(String statusMessage) {
		logStatus(statusMessage, null);
	}

	public final void makeMovement(Movement mov) {
		makeMovement(mov, null);
	}

	public final void newParticipant(String nick, int team) {
		newParticipant(nick, team, null);
	}

	public final void participantLeft(String nick, int team) {
		participantLeft(nick, team, null);
	}

	public final void receiveMessage(String from, String message) {
		receiveMessage(from, message, null);
	}

	public final void score(int team, int scored) {
		score(team, scored, null);
	}

	public final void setBoard(int[][] boardValues) {
		setBoard(boardValues, null);
	}

	public final void startGame() {
		startGame(null);
	}

	public final void turn(int team) {
		turn(team, null);
	}

	public static Ice.DispatchStatus ___newParticipant(Client __obj,
			IceInternal.Incoming __inS, Ice.Current __current) {
		__checkMode(Ice.OperationMode.Normal, __current.mode);
		IceInternal.BasicStream __is = __inS.startReadParams();
		String nick;
		int team;
		nick = __is.readString();
		team = __is.readInt();
		__inS.endReadParams();
		__obj.newParticipant(nick, team, __current);
		__inS.__writeEmptyParams();
		return Ice.DispatchStatus.DispatchOK;
	}

	public static Ice.DispatchStatus ___participantLeft(Client __obj,
			IceInternal.Incoming __inS, Ice.Current __current) {
		__checkMode(Ice.OperationMode.Normal, __current.mode);
		IceInternal.BasicStream __is = __inS.startReadParams();
		String nick;
		int team;
		nick = __is.readString();
		team = __is.readInt();
		__inS.endReadParams();
		__obj.participantLeft(nick, team, __current);
		__inS.__writeEmptyParams();
		return Ice.DispatchStatus.DispatchOK;
	}

	public static Ice.DispatchStatus ___startGame(Client __obj,
			IceInternal.Incoming __inS, Ice.Current __current) {
		__checkMode(Ice.OperationMode.Normal, __current.mode);
		__inS.readEmptyParams();
		__obj.startGame(__current);
		__inS.__writeEmptyParams();
		return Ice.DispatchStatus.DispatchOK;
	}

	public static Ice.DispatchStatus ___endGame(Client __obj,
			IceInternal.Incoming __inS, Ice.Current __current) {
		__checkMode(Ice.OperationMode.Normal, __current.mode);
		IceInternal.BasicStream __is = __inS.startReadParams();
		int team;
		team = __is.readInt();
		__inS.endReadParams();
		__obj.endGame(team, __current);
		__inS.__writeEmptyParams();
		return Ice.DispatchStatus.DispatchOK;
	}

	public static Ice.DispatchStatus ___setBoard(Client __obj,
			IceInternal.Incoming __inS, Ice.Current __current) {
		__checkMode(Ice.OperationMode.Idempotent, __current.mode);
		IceInternal.BasicStream __is = __inS.startReadParams();
		int[][] boardValues;
		boardValues = BoardMatrixHelper.read(__is);
		__inS.endReadParams();
		__obj.setBoard(boardValues, __current);
		__inS.__writeEmptyParams();
		return Ice.DispatchStatus.DispatchOK;
	}

	public static Ice.DispatchStatus ___turn(Client __obj,
			IceInternal.Incoming __inS, Ice.Current __current) {
		__checkMode(Ice.OperationMode.Idempotent, __current.mode);
		IceInternal.BasicStream __is = __inS.startReadParams();
		int team;
		team = __is.readInt();
		__inS.endReadParams();
		__obj.turn(team, __current);
		__inS.__writeEmptyParams();
		return Ice.DispatchStatus.DispatchOK;
	}

	public static Ice.DispatchStatus ___log(Client __obj,
			IceInternal.Incoming __inS, Ice.Current __current) {
		__checkMode(Ice.OperationMode.Normal, __current.mode);
		IceInternal.BasicStream __is = __inS.startReadParams();
		String message;
		message = __is.readString();
		__inS.endReadParams();
		__obj.log(message, __current);
		__inS.__writeEmptyParams();
		return Ice.DispatchStatus.DispatchOK;
	}

	public static Ice.DispatchStatus ___customLog(Client __obj,
			IceInternal.Incoming __inS, Ice.Current __current) {
		__checkMode(Ice.OperationMode.Normal, __current.mode);
		IceInternal.BasicStream __is = __inS.startReadParams();
		String message;
		int code;
		message = __is.readString();
		code = __is.readInt();
		__inS.endReadParams();
		__obj.customLog(message, code, __current);
		__inS.__writeEmptyParams();
		return Ice.DispatchStatus.DispatchOK;
	}

	public static Ice.DispatchStatus ___logStatus(Client __obj,
			IceInternal.Incoming __inS, Ice.Current __current) {
		__checkMode(Ice.OperationMode.Normal, __current.mode);
		IceInternal.BasicStream __is = __inS.startReadParams();
		String statusMessage;
		statusMessage = __is.readString();
		__inS.endReadParams();
		__obj.logStatus(statusMessage, __current);
		__inS.__writeEmptyParams();
		return Ice.DispatchStatus.DispatchOK;
	}

	public static Ice.DispatchStatus ___makeMovement(Client __obj,
			IceInternal.Incoming __inS, Ice.Current __current) {
		__checkMode(Ice.OperationMode.Normal, __current.mode);
		IceInternal.BasicStream __is = __inS.startReadParams();
		Movement mov;
		mov = new Movement();
		mov.__read(__is);
		__inS.endReadParams();
		__obj.makeMovement(mov, __current);
		__inS.__writeEmptyParams();
		return Ice.DispatchStatus.DispatchOK;
	}

	public static Ice.DispatchStatus ___fillNewSquares(Client __obj,
			IceInternal.Incoming __inS, Ice.Current __current) {
		__checkMode(Ice.OperationMode.Idempotent, __current.mode);
		IceInternal.BasicStream __is = __inS.startReadParams();
		Square[] newSquares;
		newSquares = SquareListHelper.read(__is);
		__inS.endReadParams();
		__obj.fillNewSquares(newSquares, __current);
		__inS.__writeEmptyParams();
		return Ice.DispatchStatus.DispatchOK;
	}

	public static Ice.DispatchStatus ___score(Client __obj,
			IceInternal.Incoming __inS, Ice.Current __current) {
		__checkMode(Ice.OperationMode.Normal, __current.mode);
		IceInternal.BasicStream __is = __inS.startReadParams();
		int team;
		int scored;
		team = __is.readInt();
		scored = __is.readInt();
		__inS.endReadParams();
		__obj.score(team, scored, __current);
		__inS.__writeEmptyParams();
		return Ice.DispatchStatus.DispatchOK;
	}

	public static Ice.DispatchStatus ___receiveMessage(Client __obj,
			IceInternal.Incoming __inS, Ice.Current __current) {
		__checkMode(Ice.OperationMode.Normal, __current.mode);
		IceInternal.BasicStream __is = __inS.startReadParams();
		String from;
		String message;
		from = __is.readString();
		message = __is.readString();
		__inS.endReadParams();
		__obj.receiveMessage(from, message, __current);
		__inS.__writeEmptyParams();
		return Ice.DispatchStatus.DispatchOK;
	}

	private final static String[] __all = { "customLog", "endGame",
			"fillNewSquares", "ice_id", "ice_ids", "ice_isA", "ice_ping",
			"log", "logStatus", "makeMovement", "newParticipant",
			"participantLeft", "receiveMessage", "score", "setBoard",
			"startGame", "turn" };

	public Ice.DispatchStatus __dispatch(IceInternal.Incoming in,
			Ice.Current __current) {
		int pos = java.util.Arrays.binarySearch(__all, __current.operation);
		if (pos < 0) {
			throw new Ice.OperationNotExistException(__current.id,
					__current.facet, __current.operation);
		}

		switch (pos) {
		case 0: {
			return ___customLog(this, in, __current);
		}
		case 1: {
			return ___endGame(this, in, __current);
		}
		case 2: {
			return ___fillNewSquares(this, in, __current);
		}
		case 3: {
			return ___ice_id(this, in, __current);
		}
		case 4: {
			return ___ice_ids(this, in, __current);
		}
		case 5: {
			return ___ice_isA(this, in, __current);
		}
		case 6: {
			return ___ice_ping(this, in, __current);
		}
		case 7: {
			return ___log(this, in, __current);
		}
		case 8: {
			return ___logStatus(this, in, __current);
		}
		case 9: {
			return ___makeMovement(this, in, __current);
		}
		case 10: {
			return ___newParticipant(this, in, __current);
		}
		case 11: {
			return ___participantLeft(this, in, __current);
		}
		case 12: {
			return ___receiveMessage(this, in, __current);
		}
		case 13: {
			return ___score(this, in, __current);
		}
		case 14: {
			return ___setBoard(this, in, __current);
		}
		case 15: {
			return ___startGame(this, in, __current);
		}
		case 16: {
			return ___turn(this, in, __current);
		}
		}

		assert (false);
		throw new Ice.OperationNotExistException(__current.id, __current.facet,
				__current.operation);
	}

	protected void __writeImpl(IceInternal.BasicStream __os) {
		__os.startWriteSlice(ice_staticId(), -1, true);
		__os.endWriteSlice();
	}

	protected void __readImpl(IceInternal.BasicStream __is) {
		__is.startReadSlice();
		__is.endReadSlice();
	}

	public static final long serialVersionUID = 0L;
}
